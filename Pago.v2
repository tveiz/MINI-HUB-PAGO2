import discord
from discord.ext import commands
from discord import app_commands
import asyncio

intents = discord.Intents.default()
intents.message_content = True
intents.members = True

bot = commands.Bot(command_prefix="!", intents=intents)

# Guarda os produtos: id -> {nome, preco, estoque}
produtos = {}
produto_id_counter = 1

# Cargo obrigatório
CARGO_MEMBROS = "Membros"

# Canal feedbacks
CANAL_FEEDBACKS = "feedbacks"


@bot.event
async def on_ready():
    print(f"Bot conectado como {bot.user}")

    # Tenta criar o canal de feedback se não existir
    guild = bot.guilds[0] if bot.guilds else None
    if guild:
        canal_feedback = discord.utils.get(guild.text_channels, name=CANAL_FEEDBACKS)
        if not canal_feedback:
            await guild.create_text_channel(CANAL_FEEDBACKS)
            print(f"Criado canal #{CANAL_FEEDBACKS}")



# Comando /criar para adicionar produtos (apenas Membros)
@bot.tree.command(name="criar", description="Criar produto para venda")
@app_commands.describe(nome="Nome do produto", preco="Preço do produto (R$)", estoque="Quantidade em estoque")
async def criar(interaction: discord.Interaction, nome: str, preco: float, estoque: int):
    # Verifica cargo
    membro = discord.utils.get(interaction.user.roles, name=CARGO_MEMBROS)
    if not membro:
        await interaction.response.send_message(f"Você precisa do cargo `{CARGO_MEMBROS}` para criar produtos.", ephemeral=True)
        return

    global produto_id_counter
    prod_id = produto_id_counter
    produto_id_counter += 1

    produtos[prod_id] = {"nome": nome, "preco": preco, "estoque": estoque}

    # Cria botão para comprar
    view = discord.ui.View()

    botao = discord.ui.Button(label=f"Comprar {nome} - R${preco:.2f}", style=discord.ButtonStyle.green)
    async def botao_callback(botao_interaction):
        await abrir_carrinho(botao_interaction, prod_id)
    botao.callback = botao_callback
    view.add_item(botao)

    await interaction.response.send_message(f"Produto criado:\n**{nome}** - R${preco:.2f} - Estoque: {estoque}", view=view, ephemeral=True)


async def abrir_carrinho(interaction: discord.Interaction, prod_id: int):
    # Cria canal privado para o usuário e cargos admins
    guild = interaction.guild
    membro = interaction.user

    # Permissões: só o usuário e cargos admins podem ver
    overwrites = {
        guild.default_role: discord.PermissionOverwrite(view_channel=False),
        membro: discord.PermissionOverwrite(view_channel=True, send_messages=True),
    }
    # Pode adicionar mais cargos que veem o canal, exemplo administradores
    cargo_admin = discord.utils.get(guild.roles, name="Admin")
    if cargo_admin:
        overwrites[cargo_admin] = discord.PermissionOverwrite(view_channel=True, send_messages=True)

    canal_nome = f"carrinho-{membro.name}".lower()
    # Se já existir, manda mensagem e retorna
    existente = discord.utils.get(guild.channels, name=canal_nome)
    if existente:
        await interaction.response.send_message(f"Você já tem um carrinho aberto em {existente.mention}", ephemeral=True)
        return

    canal = await guild.create_text_channel(canal_nome, overwrites=overwrites, topic=f"Carrinho de compras de {membro.display_name}")

    # Mensagem inicial com opção de adicionar mais produtos e escolha pagamento
    produto = produtos.get(prod_id)
    if not produto:
        await interaction.response.send_message("Produto não encontrado.", ephemeral=True)
        return

    embed = discord.Embed(title="Seu Carrinho", description=f"Produto: **{produto['nome']}**\nPreço: R${produto['preco']:.2f}\n\nDeseja adicionar mais produtos?", color=discord.Color.green())
    view = discord.ui.View()

    # Botão adicionar mais (abre a lista de produtos)
    botao_adicionar = discord.ui.Button(label="Adicionar mais produtos", style=discord.ButtonStyle.blurple)
    async def adicionar_callback(botao_inter):
        await botao_inter.response.defer()
        await listar_produtos(botao_inter)
    botao_adicionar.callback = adicionar_callback
    view.add_item(botao_adicionar)

    # Botão finalizar compra
    botao_finalizar = discord.ui.Button(label="Finalizar compra", style=discord.ButtonStyle.green)
    async def finalizar_callback(botao_finalizar_inter):
        await botao_finalizar_inter.response.defer()
        await escolher_pagamento(botao_finalizar_inter)
    botao_finalizar.callback = finalizar_callback
    view.add_item(botao_finalizar)

    await canal.send(f"{membro.mention}, seu carrinho foi criado!", embed=embed, view=view)
    await interaction.response.send_message(f"Carrinho criado em {canal.mention}", ephemeral=True)


async def listar_produtos(interaction: discord.Interaction):
    # Mostra lista de produtos para adicionar no carrinho
    embed = discord.Embed(title="Produtos Disponíveis", color=discord.Color.blue())
    view = discord.ui.View()

    for pid, p in produtos.items():
        botao = discord.ui.Button(label=f"{p['nome']} - R${p['preco']:.2f} (Estoque: {p['estoque']})", style=discord.ButtonStyle.secondary)
        async def botao_add_callback(i, produto_id=pid):
            # Abre carrinho com produto escolhido
            await abrir_carrinho(i, produto_id)
            await i.message.delete()
        botao.callback = botao_add_callback
        view.add_item(botao)

    await interaction.followup.send(embed=embed, view=view, ephemeral=True)


async def escolher_pagamento(interaction: discord.Interaction):
    # Só quem tem o cargo pode definir as formas de pagamento
    membro = discord.utils.get(interaction.user.roles, name=CARGO_MEMBROS)
    if not membro:
        await interaction.response.send_message(f"Você precisa do cargo `{CARGO_MEMBROS}` para escolher a forma de pagamento.", ephemeral=True)
        return

    embed = discord.Embed(title="Escolha a forma de pagamento", color=discord.Color.gold())
    embed.description = (
        "Coloque as informações de pagamento abaixo:\n\n"
        "Digite a chave Pix, cole o código QR e o Pix cópia e cola.\n\n"
        "Formato:\n"
        "- Chave Pix\n"
        "- QR code (imagem ou link)\n"
        "- Pix cópia e cola"
    )

    await interaction.response.send_message(embed=embed, ephemeral=True)

    def check(m):
        return m.author == interaction.user and m.channel == interaction.channel

    try:
        msg = await bot.wait_for("message", timeout=300.0, check=check)
    except asyncio.TimeoutError:
        await interaction.followup.send("Tempo esgotado para enviar as informações de pagamento.", ephemeral=True)
        return

    # Salvar essas informações para o carrinho - para simplificar, vamos enviar essa info pro canal do carrinho
    await interaction.channel.send(f"Informações de pagamento definidas:\n{msg.content}")

    # Após definir, pede feedback
    await pedir_feedback(interaction.channel, interaction.user)


async def pedir_feedback(canal, usuario):
    embed = discord.Embed(
        title="Avalie seu atendimento",
        description="Por favor, responda com uma nota de 1 a 5 e deixe seu feedback abaixo:",
        color=discord.Color.purple(),
    )
    await canal.send(f"{usuario.mention}", embed=embed)

    def check(m):
        return m.author == usuario and m.channel == canal

    try:
        feedback_msg = await bot.wait_for("message", timeout=600.0, check=check)
    except asyncio.TimeoutError:
        await canal.send(f"{usuario.mention}, tempo para feedback esgotado.")
        return

    # Espera pela nota
    await canal.send(f"{usuario.mention}, por favor, envie agora uma nota de 1 a 5 para o atendimento:")

    def check_nota(m):
        return m.author == usuario and m.channel == canal and m.content.isdigit() and 1 <= int(m.content) <= 5

    try:
        nota_msg = await bot.wait_for("message", timeout=300.0, check=check_nota)
    except asyncio.TimeoutError:
        await canal.send(f"{usuario.mention}, tempo para enviar a nota esgotado.")
        return

    nota = int(nota_msg.content)
    feedback = feedback_msg.content

    # Envia para canal feedbacks
    guild = canal.guild
    canal_feedback = discord.utils.get(guild.text_channels, name=CANAL_FEEDBACKS)
    if not canal_feedback:
        canal_feedback = await guild.create_text_channel(CANAL_FEEDBACKS)

    embed = discord.Embed(title="Novo Feedback", color=discord.Color.teal())
    embed.add_field(name="Usuário", value=usuario.mention, inline=False)
    embed.add_field(name="Nota", value=f"{nota} / 5", inline=False)
    embed.add_field(name="Comentário", value=feedback, inline=False)
    await canal_feedback.send(embed=embed)

    await canal.send(f"{usuario.mention}, obrigado pelo feedback!")



# Sincroniza comandos slash no bot
@bot.event
async def on_connect():
    try:
        await bot.tree.sync()
        print("Comandos sincronizados.")
    except Exception as e:
        print(f"Erro ao sincronizar comandos: {e}")



bot.run("SEU_TOKEN_AQUI")
